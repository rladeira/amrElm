% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/amrElm-ssl-train.R
\name{amrElmSSLTrain}
\alias{amrElmSSLTrain}
\title{Creates a model for AMR-ELM.}
\usage{
amrElmSSLTrain(l, nl, XTrain, YTrain, affinity = "cosine")
}
\arguments{
\item{l}{the number of hidden neurons}

\item{nl}{the number of labeled patterns}

\item{XTrain}{training data, numerical with zero mean and unit variance and patterns in the lines, attributes in the columns
- the unlabeled patterns must came after the labeled ones}

\item{YTrain}{training data labels (only two classes, with labels equals to -1 or +1, and 0 for the unlabeled patterns)}

\item{affinity}{- only cosine implemented}
}
\value{
The amrElm model for semissupervised problems - a list with:
         Z: hidden layer weights
         H: hidden layer output
         W: output layer weights
         affinity: the affinity used to generate the model (e.g.: cosine affinity)
         dataTrain: training data for generating affinity matrix.
}
\description{
Creates a model for AMR-ELM.
}
\examples{

\dontrun{
library(amrElm)

data(heart)

data <- heart$data
labels <- heart$labels

l <- 500
nl <- 50

N <- nrow(data)
randomPatterns <- seq(N)

data <- data[randomPatterns,]
labels <- labels[randomPatterns]

nTrain <- floor(2*N/3)
nTest <- N - nTrain

data <- data[randomPatterns,]
labels <- labels[randomPatterns]

XTrain <- data[1:nTrain,]
XTest <- data[(nTrain+1):N,]

YTrain <- labels[1:nTrain]
YTest[(nl+1):nTrain] <- 0

model <- amrElmSSLTrain(l,nl,XTrain,YTrain)
testOutput <- amrElmTest(XTest, model)
}
}
