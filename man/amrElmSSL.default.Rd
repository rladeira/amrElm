% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/amrElmSSL.R
\name{amrElmSSL.default}
\alias{amrElmSSL.default}
\title{Creates a model for AMR-ELM.}
\usage{
\method{amrElmSSL}{default}(X, y, hidden_neurons, nl, affinity = "cosine")
}
\arguments{
\item{X}{training data, numerical with zero mean and unit variance and patterns in the lines, attributes in the columns
- the unlabeled patterns must came after the labeled ones}

\item{y}{training data labels (only two classes, with labels equals to -1 or +1, and 0 for the unlabeled patterns)}

\item{hidden_neurons}{the number of hidden neurons}

\item{nl}{the number of labeled patterns}

\item{affinity}{- only cosine implemented}
}
\value{
The amrElm model for semissupervised problems - a list with:
         Z: hidden layer weights
         H: hidden layer output
         weights: output layer weights
         affinity: the affinity used to generate the model (e.g.: cosine affinity)
         X: training data for generating affinity matrix.
}
\description{
Creates a model for AMR-ELM.
}
\examples{

\dontrun{
library(amrElm)

data(heart)

data <- heart$data
labels <- heart$labels

hidden_neurons <- 500
nl <- 50

N <- nrow(data)
randomPatterns <- seq(N)

data <- data[randomPatterns,]
labels <- labels[randomPatterns]

n <- floor(2*N/3)
nTest <- N - n

data <- data[randomPatterns,]
labels <- labels[randomPatterns]

X <- data[1:n,]
XTest <- data[(n+1):N,]

y <- labels[1:n]
y[(nl+1):n] <- 0

model <- amrElmSSLTrain(hidden_neurons,nl,X,y)
testOutput <- amrElmTest(XTest, model)
}

}
